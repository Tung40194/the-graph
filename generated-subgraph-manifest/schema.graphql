type Account @entity {
	id: ID!
	asERC721: ERC721Contract
	ERC721tokens: [ERC721Token!]! @derivedFrom(field: "owner")
	ERC721operatorOwner: [ERC721Operator!]! @derivedFrom(field: "owner")
	ERC721operatorOperator: [ERC721Operator!]! @derivedFrom(field: "operator")
	ERC721transferFromEvent: [ERC721Transfer!]! @derivedFrom(field: "from")
	ERC721transferToEvent: [ERC721Transfer!]! @derivedFrom(field: "to")
	asERC20: ERC20Contract
	ERC20balances: [ERC20Balance!]! @derivedFrom(field: "account")
	ERC20approvalsOwner: [ERC20Approval!]! @derivedFrom(field: "owner")
	ERC20approvalsSpender: [ERC20Approval!]! @derivedFrom(field: "spender")
	ERC20transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "from")
	ERC20transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "to")
	events: [Event!]! @derivedFrom(field: "emitter")
}
type ERC721Contract @entity {
	id: ID!
	asAccount: Account!
	supportsMetadata: Boolean
	name: String
	symbol: String
	tokens: [ERC721Token!]! @derivedFrom(field: "contract")
	operators: [ERC721Operator!]! @derivedFrom(field: "contract")
	transfers: [ERC721Transfer!]! @derivedFrom(field: "contract")
}
type ERC721Token @entity {
	id: ID!
	contract: ERC721Contract!
	identifier: BigInt!
	owner: Account!
	approval: Account!
	uri: String
	transfers: [ERC721Transfer!]! @derivedFrom(field: "token")
}
type ERC721Operator @entity {
	id: ID!
	contract: ERC721Contract!
	owner: Account!
	operator: Account!
	approved: Boolean!
}
type ERC721Transfer implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC721Contract!
	token: ERC721Token!
	from: Account!
	to: Account!
}
type ERC20Contract @entity {
	id: ID!
	asAccount: Account!
	name: String
	symbol: String
	decimals: Int!
	totalSupply: ERC20Balance!
	balances: [ERC20Balance!]! @derivedFrom(field: "contract")
	approvals: [ERC20Approval!]! @derivedFrom(field: "contract")
	transfers: [ERC20Transfer!]! @derivedFrom(field: "contract")
}
type ERC20Balance @entity {
	id: ID!
	contract: ERC20Contract!
	account: Account
	value: BigDecimal!
	valueExact: BigInt!
	transferFromEvent: [ERC20Transfer!]! @derivedFrom(field: "fromBalance")
	transferToEvent: [ERC20Transfer!]! @derivedFrom(field: "toBalance")
}
type ERC20Approval @entity {
	id: ID!
	contract: ERC20Contract!
	owner: Account!
	spender: Account!
	value: BigDecimal!
	valueExact: BigInt!
}
type ERC20Transfer implements Event @entity {
	id: ID!
	emitter: Account!
	transaction: Transaction!
	timestamp: BigInt!
	contract: ERC20Contract!
	from: Account
	fromBalance: ERC20Balance
	to: Account
	toBalance: ERC20Balance
	value: BigDecimal!
	valueExact: BigInt!
}
interface Event {
	id: ID!
	transaction: Transaction!
	emitter: Account!
	timestamp: BigInt!
}
type Transaction @entity {
	id: ID!
	timestamp: BigInt!
	blockNumber: BigInt!
	events: [Event!]! @derivedFrom(field: "transaction")
}
